
# Full Stack Production Docker Compose for marvin App
# This includes frontend, backend, PostgreSQL, and Neo4j services
version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    container_name: marvin-frontend
    image: ${DOCKER_USERNAME}/marvin-frontend:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend

  # Backend - FastAPI Application
  backend:
    container_name: marvin-backend
    image: ${DOCKER_USERNAME}/marvin-backend:latest
    ports:
      - "8016:8000"
    environment:
      # AI/LLM Configuration (if applicable)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5009"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy

  # Database - PostgreSQL
  postgres:
    container_name: marvin-postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
      # - ./backend/backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    container_name: marvin-neo4j
    # image: neo4j:5.15-community
    image: neo4j:latest
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
      # NEO4J_PLUGINS: '["apoc"]'
      # NEO4J_dbms_security_procedures_unrestricted: apoc.*
      # NEO4J_dbms_default_listen_address: 0.0.0.0
      # NEO4J_dbms_connector_bolt_listen_address: 0.0.0.0:7687
      # NEO4J_dbms_connector_http_listen_address: 0.0.0.0:7474
    ports:
      - "7475:7474"  # HTTP
      - "7688:7687"  # Bolt
    volumes:
      - ./logs:/logs
      - ./data:/data
      - ./plugins:/plugins
      - ./import:/var/lib/neo4j/import
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional - for session management and caching)
  redis:
    container_name: marvin-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  default:
    name: marvin-network
    driver: bridge
